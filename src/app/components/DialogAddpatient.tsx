'use client';
import { useRef } from 'react';
import { useEffect, useState } from 'react';
import * as React from 'react';
// ui shadcn 
import { Button } from "@/components/ui/button"
import { Dialog, DialogClose, DialogContent, DialogFooter, DialogHeader, DialogTitle, } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Checkbox } from "@/components/ui/checkbox"
import { Card, CardContent } from "@/components/ui/card"
import { Separator } from "@/components/ui/separator"
// icons 
import { AlertTriangle, User } from "lucide-react"

//api fetch
import { fetchSis, getProvinces, getDistricts, getSubdistricts, getZipcode, handleAddPatient } from "../api/api_dialog_addpatient"

//mui
import Radio from '@mui/material/Radio';
import RadioGroup from '@mui/material/RadioGroup';
import FormControlLabel from '@mui/material/FormControlLabel';
import FormControl from '@mui/material/FormControl';
import FormLabel from '@mui/material/FormLabel';

//alert toast
import toast from 'react-hot-toast';

interface Sis {
    sis_id: number;
    name_sis: string;
}

interface Props {
    open: boolean;
    onClose: () => void;
    onSuccess: () => void
}


const statuses = ["‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà", "‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤", "Chronic", "Acute"];

export default function DialogAddpatient({ open, onClose, onSuccess }: Props) {
    const [sisList, setSisList] = useState<Sis[]>([]);
    const [selectedSis, setSelectedSis] = useState<string | number>('');
    const [provinces, setProvinces] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [subdistricts, setSubdistricts] = useState([]);

    const [selectedProvince, setSelectedProvince] = useState<number | null>(null);
    const [selectedDistrict, setSelectedDistrict] = useState<number | null>(null);
    const [selectedSubdistrict, setSelectedSubdistrict] = useState<number | null>(null);
    const [zipcode, setZipcode] = useState('');

    const [patient_type, setpatient_type] = useState<string[]>([]);

    const formRef = useRef<HTMLFormElement>(null);

    const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        const result = await handleAddPatient(e);

        if (result?.success) { //‡∏ñ‡πâ‡∏≤ result ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ undefined ‡πÅ‡∏•‡∏∞ result.success ‡πÄ‡∏õ‡πá‡∏ô true ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
            toast.success(result.message, {
                duration: 2000,
                position: 'top-center',
            });
            formRef.current?.reset(); //‡∏£‡∏µ‡πÄ‡∏ã‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
            setValue(''); // ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï radio ‡πÄ‡∏û‡∏® (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏´‡∏°‡πà)
            setSelectedSis('');
            setpatient_type([]);
            setZipcode('');
            setSelectedProvince(null);
            setSelectedDistrict(null);
            setSelectedSubdistrict(null);
            onClose();
        } else {
            toast.error(result?.message);
        }
    };

    // üîÅ Fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà modal ‡πÄ‡∏õ‡∏¥‡∏î
    useEffect(() => {
        if (open) {
            const loadSis = async () => {
                try {
                    const data = await fetchSis();
                    setSisList(data);
                } catch (err) {
                    console.error('Error fetching sis:', err);
                }
            };
            loadSis();
        }
    }, [open]); // ‚Üê trigger ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà open ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    useEffect(() => {
        getProvinces().then(setProvinces);
    }, []);

    useEffect(() => {
        if (selectedProvince) {
            getDistricts(selectedProvince).then(data => {
                setDistricts(data);
                setSelectedDistrict(null);
                setSubdistricts([]);
                setZipcode('');
            });
        }
    }, [selectedProvince]);

    useEffect(() => {
        if (selectedDistrict) {
            getSubdistricts(selectedDistrict).then(data => {
                setSubdistricts(data);
                setSelectedSubdistrict(null);
                setZipcode('');
            });
        }
    }, [selectedDistrict]);

    useEffect(() => {
        if (selectedSubdistrict) {
            getZipcode(selectedSubdistrict).then(setZipcode);
        }
    }, [selectedSubdistrict]);

    const [value, setValue] = React.useState('female');

    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        setValue((event.target as HTMLInputElement).value);
    };


    return (
        <Dialog open={open} onOpenChange={onClose} >
            <DialogContent className="sm:max-w-[600px] max-h-[90vh] overflow-y-auto" >
                <DialogHeader className="text-center pb-4">
                    <div className="mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-3">
                        <User className="h-6 w-6" />
                    </div>
                    <DialogTitle className="text-xl font-semibold">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</DialogTitle>
                </DialogHeader>
                <form className="space-y-6" onSubmit={handleSubmit}>

                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
                    <Card>
                        <CardContent>
                            <h3 className="font-medium text-sm text-gray-700 mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô</h3>
                            <div className="grid gap-4">
                                <div className="grid gap-2">
                                    <Label htmlFor="HN" className="text-sm font-medium">
                                        ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN <span className="text-red-500">*</span>
                                    </Label>
                                    <Input id="HN" name="patient_HN" type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç HN" className="w-full" />
                                </div>

                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤</Label>
                                        <Select name='patient_title'>
                                            <SelectTrigger>
                                                <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="‡∏ô‡∏≤‡∏¢">‡∏ô‡∏≤‡∏¢</SelectItem>
                                                <SelectItem value="‡∏ô‡∏≤‡∏á">‡∏ô‡∏≤‡∏á</SelectItem>
                                                <SelectItem value="‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß">‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß</SelectItem>
                                                <SelectItem value="‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢">‡πÄ‡∏î‡πá‡∏Å‡∏ä‡∏≤‡∏¢</SelectItem>
                                                <SelectItem value="‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á">‡πÄ‡∏î‡πá‡∏Å‡∏´‡∏ç‡∏¥‡∏á</SelectItem>
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">
                                            ‡∏ä‡∏∑‡πà‡∏≠ <span className="text-red-500">*</span>
                                        </Label>
                                        <Input name="patient_firstname" type="text" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" required />
                                    </div>

                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">
                                            ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• <span className="text-red-500">*</span>
                                        </Label>
                                        <Input name="patient_lastname" type="text" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" required />
                                    </div>
                                </div>

                                <div className="grid gap-2">
                                    <Label htmlFor="yearold" className="text-sm font-medium">
                                        ‡∏≠‡∏≤‡∏¢‡∏∏
                                    </Label>
                                    <Input name="patient_age" type="number" placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏" className="w-32" required />
                                </div>

                                <FormControl>
                                    <FormLabel id="demo-controlled-radio-buttons-group">‡πÄ‡∏û‡∏®</FormLabel>
                                    <RadioGroup
                                        aria-labelledby="demo-controlled-radio-buttons-group"
                                        name="patient_gender"
                                        value={value}
                                        onChange={handleChange}
                                    >
                                        <FormControlLabel value="‡∏ä‡∏≤‡∏¢" control={<Radio />} label="‡∏ä‡∏≤‡∏¢" />
                                        <FormControlLabel value="‡∏´‡∏ç‡∏¥‡∏á" control={<Radio />} label="‡∏´‡∏ç‡∏¥‡∏á" />
                                    </RadioGroup>
                                </FormControl>
                            </div>
                        </CardContent>
                    </Card>

                    {/* ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
                    <Card>
                        <CardContent >
                            <h3 className="font-medium text-sm text-gray-700 mb-4">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h3>
                            <div className="grid gap-4">
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                                    <div className="grid gap-2">
                                        <Input name="patient_address" type="text" placeholder="‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà" required />
                                    </div>

                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î</Label>
                                        <Select onValueChange={(value) => setSelectedProvince(Number(value))} name='province_id'>
                                            <SelectTrigger>
                                                <SelectValue placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {provinces.map((p: any) => (
                                                    <SelectItem key={p.province_id} value={String(p.province_id)}>{p.name_th}</SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï</Label>
                                        <Select onValueChange={(value) => setSelectedDistrict(Number(value))} name='district_id'>
                                            <SelectTrigger>
                                                <SelectValue placeholder="‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {districts.map((d: any) => (
                                                    <SelectItem key={d.district_id} value={String(d.district_id)}>{d.name_th}</SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á</Label>
                                        <Select onValueChange={(value) => setSelectedSubdistrict(Number(value))} name='subdistrict_id'>
                                            <SelectTrigger>
                                                <SelectValue placeholder="‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {subdistricts.map((s: any) => (
                                                    <SelectItem key={s.subdistrict_id} value={String(s.subdistrict_id)}>{s.name_th}</SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                    </div>

                                    <div className="grid gap-2">
                                        <Label className="text-sm font-medium">
                                            ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå
                                        </Label>
                                        <Input name="patient_zipcode" type="number" placeholder="‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå" readOnly className="bg-gray-50" value={zipcode || ''} />
                                    </div>
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    {/* ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤ */}
                    <Card>
                        <CardContent >
                            <div className="grid gap-2">
                                <Label className="text-sm font-medium">‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤</Label>
                                <Select value={selectedSis.toString()} onValueChange={(value) => setSelectedSis(value)} name='patient_sis'>
                                    <SelectTrigger>
                                        <SelectValue placeholder="‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        {sisList.map((sis) => (
                                            <SelectItem key={sis.sis_id} value={String(sis.sis_id)}>
                                                {sis.name_sis}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>
                        </CardContent>
                    </Card>

                    {/* ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ */}
                    <Card>
                        <CardContent>
                            <h3 className="font-medium text-sm text-gray-700 mb-4">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</h3>
                            <div className="grid grid-cols-4 gap-4">
                                {statuses.map((status) => (
                                    <div key={status} className="flex items-center space-x-3">
                                        <Checkbox
                                            id={`patient_type-${status}`}
                                            name="patient_type"
                                            value={status}
                                            checked={patient_type.includes(status)}
                                            onCheckedChange={(checked) => {
                                                if (checked) {
                                                    setpatient_type((prev) => [...prev, status]);
                                                } else {
                                                    setpatient_type((prev) => prev.filter((s) => s !== status));
                                                }
                                            }}
                                        />
                                        <Label htmlFor={`patient_type-${status}`} className="text-sm font-medium">
                                            {status}
                                        </Label>
                                    </div>
                                ))}
                            </div>
                        </CardContent>
                    </Card>

                    {/* Alert Pre-Arrest */}
                    <Card className="border-red-200 bg-red-50/30">
                        <CardContent >
                            <div className="flex items-center space-x-3">
                                <Checkbox name='patient_health' value="Alert pre Arrest" className="border-red-500 data-[state=checked]:bg-red-500" />
                                <div className="flex items-center space-x-2">
                                    <AlertTriangle className="h-4 w-4 text-red-500" />
                                    <Label className="text-sm font-semibold text-red-600 ">
                                        Alert pre Arrest
                                    </Label>
                                </div>
                            </div>
                        </CardContent>
                    </Card>


                    <Separator />
                    <DialogFooter className="gap-2">
                        <DialogClose asChild>
                            <Button variant="outline">
                                ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
                            </Button>
                        </DialogClose>
                        <Button type="submit" variant="outline">
                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                        </Button>
                    </DialogFooter>
                </form>
            </DialogContent>
        </Dialog>
    )
}
